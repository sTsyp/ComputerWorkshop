import taichi as ti
import taichi_glsl as ts


@ti.func
def smoothmin(a, b, k):
    """
    Вычисляет сглаженное минимальное значение между двумя числами.
    Аргументы:
        a (float): Первое число.
        b (float): Второе число.
        k (float): Коэффициент сглаживания.
    Возвращает:
        float: Сглаженное минимальное значение.
    """
    h = max(k - abs(a - b), 0.) / k
    return min(a, b) - h * h * k * (1./4.)


@ti.func
def smoothmax(a, b, k):
    """
    Вычисляет сглаженное максимальное значение между двумя числами.
    Аргументы:
        a (float): Первое число.
        b (float): Второе число.
        k (float): Коэффициент сглаживания.
    Возвращает:
        float: Сглаженное максимальное значение.
    """
    return smoothmin(a, b, -k)


@ti.func
def smoothmin3(a, b, k):
    """
    Вычисляет сглаженное минимальное значение между двумя числами с другим коэффициентом сглаживания.
    Аргументы:
        a (float): Первое число.
        b (float): Второе число.
        k (float): Коэффициент сглаживания.
    Возвращает:
        float: Сглаженное минимальное значение с другим коэффициентом.
    """
    h = max(k - abs(a - b), 0.) / k
    return min(a, b) - h * h * h * k * (1./6.)


@ti.func
def skewsin(x, t):
    """
    Вычисляет искривленный синус функции.
    Аргументы:
        x (float): Входное значение.
        t (float): Параметр искривления.
    Возвращает:
        float: Искривленное значение синуса.
    """
    return ti.atan2(t * ti.sin(x), (1. - t * ti.cos(x))) / t


@ti.func
def hash1(n):
     """
    Вычисляет хэш-функцию одного числа.
    Аргументы:
        n (float): Входное число.
    Возвращает:
        float: Хэшированное значение.
    """
     return ts.fract(ti.sin(n) * 43758.5453)


@ti.func
def hash21(p):
    """
    Вычисляет хэш-функцию двухмерного вектора и возвращает одно значение.
    Аргументы:
        p (ts.vec2): Входной вектор.
    Возвращает:
        float: Хэшированное значение.
    """
    q = ts.fract(p * ts.vec2(123.34, 345.56))
    q += q @ (q + 34.23)
    return ts.fract(q.x * q.y)


@ti.func
def hash22(p):
    """
    Вычисляет хэш-функцию двухмерного вектора и возвращает двухмерный вектор.
    Аргументы:
        p (ts.vec2): Входной вектор.
    Возвращает:
        ts.vec2: Хэшированный вектор.
    """
    x = hash21(p)
    y = hash21(p + x)
    return ts.vec2(x, y)


@ti.func
def rot(a):
    """
    Вычисляет матрицу поворота на угол.
    Аргументы:
        a (float): Угол поворота в радианах.
    Возвращает:
        ts.mat: Матрица поворота.
    """
    c = ti.cos(a)
    s = ti.sin(a)
    return ts.mat([c, -s], [s, c])


@ti.func
def fract_floor(x):
    """
    Разделяет число на дробную и целую часть.
    Аргументы:
        x (float): Входное число.
    Возвращает:
        ts.vec2: Вектор, содержащий дробную и целую часть.
    """
    fl = ti.floor(x)
    return ts.vec2(x - fl, fl)


@ti.func
def length(x):
    """
    Вычисляет длину вектора.
    Аргументы:
        x (ts.vec): Входной вектор.
    Возвращает:
        float: Длина вектора.
    """
    return ti.sqrt(x @ x)
